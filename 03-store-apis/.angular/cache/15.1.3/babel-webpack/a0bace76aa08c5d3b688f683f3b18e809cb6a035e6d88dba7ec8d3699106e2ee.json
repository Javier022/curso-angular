{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class StoreService {\n  constructor() {\n    this.shoopingCart = [];\n    this.total = 0;\n    this.cart = new BehaviorSubject([]);\n    this.cart$ = this.cart.asObservable();\n  }\n  addProduct(product) {\n    this.shoopingCart = [...this.shoopingCart, product];\n    this.cart.next(this.shoopingCart);\n  }\n  getTotal() {\n    return this.shoopingCart.reduce((sum, item) => sum + item.price, 0);\n  }\n}\nStoreService.ɵfac = function StoreService_Factory(t) {\n  return new (t || StoreService)();\n};\nStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StoreService,\n  factory: StoreService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAOtC,OAAM,MAAOC,YAAY;EAOvBC;IANA,iBAAY,GAAe,EAAE;IAC7B,UAAK,GAAG,CAAC;IACT,SAAI,GAAG,IAAIF,eAAe,CAAa,EAAE,CAAC;IAE1C,UAAK,GAAG,IAAI,CAACG,IAAI,CAACC,YAAY,EAAE;EAEjB;EAEfC,UAAU,CAACC,OAAiB;IAC1B,IAAI,CAACC,YAAY,GAAG,CAAC,GAAG,IAAI,CAACA,YAAY,EAAED,OAAO,CAAC;IACnD,IAAI,CAACH,IAAI,CAACK,IAAI,CAAC,IAAI,CAACD,YAAY,CAAC;EACnC;EAEAE,QAAQ;IACN,OAAO,IAAI,CAACF,YAAY,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,KAAK,EAAE,CAAC,CAAC;EACrE;;;mBAhBWZ,YAAY;AAAA;;SAAZA,YAAY;EAAAa,SAAZb,YAAY;EAAAc,YAFX;AAAM","names":["BehaviorSubject","StoreService","constructor","cart","asObservable","addProduct","product","shoopingCart","next","getTotal","reduce","sum","item","price","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Javier\\Desktop\\curso-angular\\02-store-componentes\\src\\app\\services\\store.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { IProduct } from '../../models/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreService {\n  shoopingCart: IProduct[] = [];\n  total = 0;\n  cart = new BehaviorSubject<IProduct[]>([]);\n\n  cart$ = this.cart.asObservable();\n\n  constructor() {}\n\n  addProduct(product: IProduct) {\n    this.shoopingCart = [...this.shoopingCart, product];\n    this.cart.next(this.shoopingCart);\n  }\n\n  getTotal(): number {\n    return this.shoopingCart.reduce((sum, item) => sum + item.price, 0);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}